require "Window"

local AccountWideSettings = {}

local karrAddons = {
  "ChatLog",
  "CurrencyCount",
  "DarkMeter",
  "DiscoTelegraphs",
  "FrostMod_ThreatBall",
  "GotHUD",
  "Healie",
  "Interruptor",
  "OhmnaHelper",
  "PurchaseConfirmation",
  "TapThat",
  "tLoot",
  -- "Translator",
  "ZenScan",
}

-- function AccountWideSettings:Command(strCmd, strParam)
  -- if strParam == "save" then
    -- local tSave = {}
    -- for idx, strAddon in ipairs(karrAddons) do
      -- local addon = Apollo.GetAddon(strAddon)
      -- if not addon then
        -- Print("AWS: couldn't find \""..strAddon.."\"")
        -- return
      -- end
      -- tSave[strAddon] = {}
      -- for _, eLevel in pairs(GameLib.CodeEnumAddonSaveLevel) do
        -- tSave[strAddon][eLevel] = addon:OnSave(eLevel)
      -- end
    -- end
    -- self.tSave = tSave
    -- Print("AWS: saved")
  -- end
  -- if strParam == "load" then
    -- for idx, strAddon in ipairs(karrAddons) do
      -- local addon = Apollo.GetAddon(strAddon)
      -- addon.OnSave = function(ref, eLevel)
        -- return self.tSave[strAddon][eLevel]
      -- end
    -- end
    -- Print("AWS: loaded - reloadui to apply")
  -- end
-- end

local eColumns = {
  Checkmark = 1,
  Name      = 2,
  Author    = 3,
}

local eSortPrefix = {
  Selected    = "1",
  Unselected  = "2",
}

local eSprite = {
  Selected    = "CRB_DialogSprites:sprDialog_Icon_Check",
  Unselected  = "CRB_DialogSprites:sprDialog_Icon_DisabledCheck",
}

function AccountWideSettings:LoadMainWindow(strCmd, strParams)

  -- Print(tostring(strCmd))
  -- Print(tostring(strParams))
  
  -- if strParams ~= "" then
    -- local wndGrid = self.wndMain:FindChild("Grid")
    -- Print(tostring(wndGrid:GetColumnWidth(1)))
    -- wndGrid:SetColumnWidth(1, tonumber(strParams))
  -- end

  if self.wndMain and self.wndMain:IsValid() then
    self.wndMain:Invoke()
    return
  end
  
  if not self.tAddonList then
    
    local strWildstarDir, strSeperator = string.match(Apollo.GetAssetFolder(), "(.-)([\\/])[Aa][Dd][Dd][Oo][Nn][Ss]")
    local strAddonsXml = strWildstarDir..strSeperator.."Addons.xml"
    
    if not strWildstarDir then
      Print("AWS: failed to find WildStar Addons folder")
      return
    end
    
    self.tAddonList = {}
    local tNoToc = {}
    local tNoOnSave = {}
    local tGetAddonFailed = {}
    -- Read in the Addons.xml file which is generated by Carbine and stores load states among other things
    local tAddonXML = XmlDoc.CreateFromFile(strAddonsXml):ToTable()
    for k,v in pairs(tAddonXML) do
      -- We only care about the <Addon> tags
      if v.__XmlNode == "Addon" then
        local strAddonName
        if v.Carbine == "1" then -- Carbine Addons are the same name as thier folder (Apparently its a string 1 not a number 1)
          strAddonName = v.Folder
        else  -- User addons can have different folder/addon names so we have to parse their toc
          local xmlTOC = XmlDoc.CreateFromFile(strWildstarDir.."\\Addons\\"..v.Folder.."\\toc.xml")
          if xmlTOC then
            local tTocTable = xmlTOC:ToTable()
            strAddonName = tTocTable.Name
          else
            table.insert(tNoToc, v.Folder)
          end
        end
        if strAddonName then
          local tAddon = Apollo.GetAddon(strAddonName)
          if tAddon and tAddon.OnSave then
            tAddonInfo = Apollo.GetAddonInfo(strAddonName)
            table.insert(self.tAddonList, {
              strName = strAddonName,
              strAuthor = tAddonInfo.strAuthor,
              bCarbine = tAddonInfo.bCarbine,
            })
          elseif tAddon then
            table.insert(tNoOnSave, strAddonName)
          else
            table.insert(tGetAddonFailed, strAddonName)
          end
        end
      end
    end
    
  end

  self.wndMain = Apollo.LoadForm(self.xmlDoc, "Main", nil, self)
  local wndGrid = self.wndMain:FindChild("Grid")
  for idx, tAddonInfo in ipairs(self.tAddonList) do
    local nRow = wndGrid:AddRow(tAddonInfo.strName)
    wndGrid:SetCellText(      nRow, eColumns.Checkmark, ""                                          )
    wndGrid:SetCellLuaData(   nRow, eColumns.Checkmark, false                                       )
    wndGrid:SetCellImage(     nRow, eColumns.Checkmark, eSprite.Unselected                          )
    wndGrid:SetCellSortText(  nRow, eColumns.Checkmark, eSortPrefix.Unselected..tAddonInfo.strName  )
    wndGrid:SetCellText(      nRow, eColumns.Name,      "   "..tAddonInfo.strName                   )
    wndGrid:SetCellLuaData(   nRow, eColumns.Name,      tAddonInfo.strName                          )
    wndGrid:SetCellText(      nRow, eColumns.Author,    "   "..tAddonInfo.strAuthor                 )
  end
  
  
  -- local wndList = self.wndMain:FindChild("List")
  -- for idx, strAddon in ipairs(tAddonList) do
    -- local wndItem = Apollo.LoadForm(self.xmlDoc, "Item", wndList, self)
    -- wndItem:FindChild("Name"):SetText(strAddon)
  -- end
  -- wndList:ArrangeChildrenVert(Window.CodeEnumArrangeOrigin.LeftOrTop)
  
  
  -- Print("[AWS] num good: "..tostring(#tAddonList))

  -- self.wndMain1 = Apollo.LoadForm(self.xmlDoc, "Main", nil, self)
  -- local wndList1 = self.wndMain1:FindChild("List")
  -- Apollo.LoadForm(self.xmlDoc, "Item", wndList1, self):FindChild("Name"):SetText("No TOC")
  -- for idx, strAddon in ipairs(tNoToc) do
    -- local wndItem = Apollo.LoadForm(self.xmlDoc, "Item", wndList1, self)
    -- wndItem:FindChild("Name"):SetText(strAddon)
  -- end
  -- wndList1:ArrangeChildrenVert(Window.CodeEnumArrangeOrigin.LeftOrTop)
  -- Print("[AWS] num No TOC: "..tostring(#tNoToc))

  -- self.wndMain2 = Apollo.LoadForm(self.xmlDoc, "Main", nil, self)
  -- local wndList2 = self.wndMain2:FindChild("List")
  -- Apollo.LoadForm(self.xmlDoc, "Item", wndList2, self):FindChild("Name"):SetText("No OnSave")
  -- for idx, strAddon in ipairs(tNoOnSave) do
    -- local wndItem = Apollo.LoadForm(self.xmlDoc, "Item", wndList2, self)
    -- wndItem:FindChild("Name"):SetText(strAddon)
  -- end
  -- wndList2:ArrangeChildrenVert(Window.CodeEnumArrangeOrigin.LeftOrTop)
  -- Print("[AWS] num No OnSave: "..tostring(#tNoOnSave))

  -- self.wndMain3 = Apollo.LoadForm(self.xmlDoc, "Main", nil, self)
  -- local wndList3 = self.wndMain3:FindChild("List")
  -- Apollo.LoadForm(self.xmlDoc, "Item", wndList3, self):FindChild("Name"):SetText("GetAddon Failed")
  -- for idx, strAddon in ipairs(tGetAddonFailed) do
    -- local wndItem = Apollo.LoadForm(self.xmlDoc, "Item", wndList3, self)
    -- wndItem:FindChild("Name"):SetText(strAddon)
  -- end
  -- wndList3:ArrangeChildrenVert(Window.CodeEnumArrangeOrigin.LeftOrTop)
  -- Print("[AWS] num GetAddon Failed: "..tostring(#tGetAddonFailed))
  
  -- Print("test: "..tostring(not nil))
end

function AccountWideSettings:OnGridSelChanged(wndHandler, wndControl, nRow, nCol)
  if nCol ~= eColumns.Checkmark then return end
  local bSelected = not wndControl:GetCellData(nRow, eColumns.Checkmark)
  local strSprite = bSelected and eSprite.Selected or eSprite.Unselected
  wndControl:SetCellImage(nRow, eColumns.Checkmark, strSprite)
  local strAddon = wndControl:GetCellText(nRow, eColumns.Name) or ""
  wndControl:SetCellLuaData(nRow, eColumns.Checkmark, bSelected)
end

function AccountWideSettings:OnSave(eLevel)
  if eLevel ~= GameLib.CodeEnumAddonSaveLevel.Account then return nil end
  return self.tSave
end

function AccountWideSettings:OnRestore(eLevel, tSave)
  if eLevel ~= GameLib.CodeEnumAddonSaveLevel.Account then return end
  self.tSave = tSave
end

function AccountWideSettings:new(o)
  o = o or {}
  setmetatable(o, self)
  self.__index = self
  return o
end

function AccountWideSettings:Init()
  Apollo.RegisterAddon(self)
end

function AccountWideSettings:OnLoad()
  self.xmlDoc = XmlDoc.CreateFromFile("AccountWideSettings.xml")
  self.xmlDoc:RegisterCallback("OnDocumentReady", self)
end

function AccountWideSettings:OnDocumentReady()
  if self.xmlDoc == nil then return end
  if not self.xmlDoc:IsLoaded() then return end
  Apollo.RegisterEventHandler("InterfaceMenuListHasLoaded", "OnInterfaceMenuLoaded", self)
  Apollo.RegisterEventHandler("AccountWideSettingsInterfaceMenu", "LoadMainWindow", self)
  Apollo.RegisterSlashCommand("accountwidesettings", "LoadMainWindow", self)
  Apollo.RegisterSlashCommand("aws", "LoadMainWindow", self)
end

function AccountWideSettings:OnInterfaceMenuLoaded()
  local tData = {"AccountWideSettingsInterfaceMenu", "", "CRB_CurrencySprites:sprCashPlatinum"} --TODO
  Event_FireGenericEvent("InterfaceMenuList_NewAddOn", "AccountWideSettings", tData)
end

local AccountWideSettingsInst = AccountWideSettings:new()
AccountWideSettingsInst:Init()
